FORMAT: 1A
HOST: https://www.overviewproject.org/api/v1

# The Overview Project

The Overview Project API lets you manipulate document sets and related objects from
https://www.overviewproject.org.

## Authentication

You'll need two special pieces of information to access all endpoints:

* Your **Document Set ID**. This points to a set of documents.
* Your **API Token**. This is your identity and a password.

Got all that? Great. Now, for every request, add an `Authorization` header of `Basic {base64Encode(apiToken + ":x-auth-token")}`.

## API Tokens

To access the API, your program needs an **API Token**. That token allows a script to behave like the user who created it, granting permissions on one document set. Keep it secret: anybody who can figure out the token has full read/write access to that document set.

If you're serving a custom View, Overview will automatically create an API token and pass it to your Plugin.

If you're creating a standalone program, though, you'll need to create your own token.

While we work out the kinks, Overview's API is **experimental**; we've hidden the page that lets you generate an API token for a document set. To find it:

1. Browse to a document set.
2. Add "/api-tokens" to the URL. The URL should look like `http://www.overviewproject.org/documentsets/123/api-tokens`.
3. Type in your app name and generate a token.

Now you can test your token. On a command-line:

`curl -u 'MYTOKEN:x-auth-token' http://www.overviewproject.org/api/v1/document-sets/123/tags`

This API endpoint will list all the tags on the document set.

## Rules of API requests

* Requests and responses are always in [JSON](http://json.org).
* All requests must be authorized. That means they must have an `Authorization` header of `Basic #{base64encode("MYTOKEN:x-auth-token")}`.
* `GET` and `HEAD` requests won't modify the document set. `POST`, `PUT`, `PATCH` and `DELETE` requests will.

## Limits

By default, you may not POST a request larger than 100 kilobytes. Should you receive a `413 Entity Too Large` HTTP error, please contact us and specify the endpoints you need: we'll up the limit.

## HTTPS

We do not support HTTP. Use nothing but HTTPS.

## Pagination

Some API requests will yield "paginated" results, meaning you're not allowed to fetch everything at once.

You can add `offset` and `limit` parameters to the query string to specify which records you'd like. (Overview will impose a maximum limit.)

Overview will return a JavaScript object that looks like this:

    {
        "pagination": {
            "offset": 150,
            "limit": 50,
            "total": 234
        },
        "items": [
            ...
        ]
    }

Here's what it means.

Let's say Overview is holding 234 (`total`) documents. You've requested a maximum (`limit`) of 50 documents per request.
Overview is picturing all 234 documents, sorted according to some criteria, but it is only giving you documents 150 (`offset`) to 200 (`offset + limit`).
If you want to read more documents, you'll have to make another request -- for instance, one with `?offset=200&limit=50` in the query string.

# Group Document Sets
A **Document Set** is a collection of documents.

## Document Sets Collection [/document-sets]

### Create a DocumentSet [POST]
You need only provide a JSON Object with a `title` property to create an empty DocumentSet.

The method will return the `documentSet` properties along with an `apiToken` you can use to add documents.

+ Request (application/json)

        {
            "title": "My fresh new document set"
        }

+ Response 201 (application/json)

        {
            "documentSet": {
                "id": 123,
                "title": "My fresh new document set"
            },
            "apiToken": {
                "token": "a-fresh-token-for-docset-123"
            }
        }

# Group Tags
A **Tag** is a label that can apply to documents.

## Tags Collection [/document-sets/{documentSetId}/tags]

+ Parameters
    + documentSetId (number,required,`1`) ... The DocumentSet ID.

### List all Tags [GET]
+ Response 200 (application/json)

        [{
          "id": 1, "name": "foo", "color": "#abcdef"
        }, {
          "id": 2, "name": "bar", "color": "#123456"
        }]

# Group Documents
A **Document** is a unit of text. It may represent anything: a tweet, a Word file, an Excel spreadsheet, a PDF, an email, a page of text, or whatever your imagination can bring.

A Document's `text` is its essence, but other data which comes in handy.

## Document [/document-sets/{documentSetId}/documents/{id}]
A single Document object, with all metadata and text.

The Document resource has the following attributes:


- id: Overview's way of identifying the document
- url: where to find the document on the Web (or your intranet)
- suppliedId: a String you use to identify the document when you aren't using Overview
- title: what to call the document in Overview's document list
- page: if this document represents one page, the page number; `null` otherwise
- keywords: An Array of Strings that Overview finds interesting about this document (as compared to the other documents in the document set)

+ Parameters
    + documentSetId (required, number, `1`) ... The Document Set ID.
    + id (required, number, `2`) ... The Document ID.
    
+ Model (application/json)

        {
            "id": 2,
            "url": "http://example.org/foo/bar.txt",
            "suppliedId": "foo/bar",
            "title": "Foo Bar",
            "keywords": [ "foo", "bar" ],
            "text": "foo. bar. foo foo bar bar...."
        }
        
### Retrieve a Document [GET]
+ Response 200

    [Document][]

## Documents Collection [/document-sets/{documentSetId}/documents?q={q}&tags={tags}&tagged={tagged}&objects={objects}&fields={fields}&offset={offset}&limit={limit}&stream={stream}]
<a name="documents-collection"></a>Collection of Documents.

Document collections can be rather large, so the `text` column doesn't appear in lists by default.

To stream the text of all documents, request `/document-sets/{documentSetId}/documents?stream=true&fields=id,text`.
By default, streaming is false, because non-streamed responses are easier to handle.
Streaming responses have no `Content-Length`, and they can be as enormous as the document set.
Use a streaming-JSON client library such as [Oboe.js](http://oboejs.com/), [Yajl](http://lloyd.github.io/yajl/), [py-yajl](https://github.com/rtyler/py-yajl/), [yajl-ruby](https://github.com/brianmario/yajl-ruby). [Jackson](https://github.com/FasterXML/jackson) (for Java) is a streaming parser already.

+ Parameters
    + documentSetId (required, number, `1`) ... The document set ID.
    + q (optional, string, `bar`) ... An [ElasticSearch query string](http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html#query-string-syntax) to filter documents.
    + tags (optional, string, `123,234,345`) ... A comma-separated list of Tag IDs. Return documents matching any tag in the list.
    + tagged (optional, boolean, `true`) ... If set, return all documents that have at least one tag (`true`) or that have zero tags (`false`).
    + objects (optional, string, `456,567,678`) ... A comma-separated list of StoreObject IDs. Return documents matching any StoreObject in the list.
    + fields (optional, string, `id`) ... Defaults to `id,keywords,pageNumber,suppliedId,title,url`. You may include `text` to include the document body, but that will limit page size. If you specify `id` on its own, return just a simple Array of Document IDs (without paginating) instead of an Array of Document JSON objects.
    + offset (optional, number, `0`) ... We're paginating; skip this many documents in the result list.
    + limit (optional, number, `1000`) ... We're paginating; return at most this many documents.
    + stream (optional, boolean, `true`) ... When `true`, respond with `Transfer-Encoding: chunked` and allow returning an unlimited number of documents.

+ Model (application/json)

        {
            "pagination": {
                "offset": 0,
                "limit": 1000,
                "total": 2
            },
            "items": [
                {
                    "id": 2,
                    "url": "http://example.org/foo/bar.txt",
                    "suppliedId": "foo/bar",
                    "title": "Foo Bar",
                    "keywords": [ "foo", "bar" ]
                },
                {
                    "id": 3,
                    "url": "http://example.org/bar/baz.txt",
                    "suppliedId": "bar/baz",
                    "title": "Bar Baz",
                    "keywords": [ "bar", "baz" ]
                }
            ]
        }

### List all Documents [GET]

+ Response 200

    [Documents Collection][]

# Group Store

A **Store** is a set of data, private to your API token. You have one and only
one Store object.

Think of a Store as a JSON object that looks like this:

        {
          "state": { "o1": "v1", "o2": "v2" },
          "objects": [
            { "id": 1234, "json": {} }
          ]
        }

All values are JSON Objects (not Arrays, Strings or Numbers). Overview assigns
IDs.

## State [/store/state]

A singleton JSON object associated with your API key.

Overview ignores this object completely. It is only here for your convenience.

+ Model (application/json)

        {
          "foo": "bar"
        }

### Retrieve your State [GET]
+ Response 200

    [State][]

### Edit your State [PUT]

Editing your State will replace it in its entirety. There are no partial edits.

+ Request (application/json)

        {
          "foo": "bar"
        }

+ Response 200

    [State][]

# Group StoreObjects

A **StoreObject** is one of a collection you control.

Think of a StoreObject like a tag. Each StoreObject has some metadata (e.g., a title), and it can be linked zero, one or many Documents.

This description is intentionally vague. StoreObjects won't handle everybody's needs, but they
should cover a broad set of applications, and they're reasonably efficient.

## StoreObject [/store/objects/{id}]

+ Parameters
    + id (required, number, `2`) ... The *StoreObject* ID.

+ Model (application/json)

        {
            "id": 2,
            "indexedLong": 4,
            "indexedString": null,
            "json": { "foo": 4 }
        }

### Retrieve a StoreObject [GET]

+ Response 200

    [StoreObject][]

### Edit a StoreObject [PUT]
You need only provide a JSON Object with a `json` property to update a StoreObject.

If you plan on creating hundreds or more StoreObjects, you'll probably want a way to search
them. You can pass an `indexedLong` and/or `indexedString` property to help.

+ Request (application/json)

        {
            "indexedLong": 4,
            "indexedString": null,
            "json": { "foo": 4 }
        }

+ Response 200

    [StoreObject][]

### Delete a StoreObject [DELETE]

+ Response 204

## StoreObjects Collection [/store/objects]
Collection of all StoreObjects.

+ Model (application/json)

        [
          { "id": 1, "indexedLong": null, "indexedString": "foo", "json": { "foo": "bar" } },
          { "id": 2, "indexedLong": 4, "indexedString": null, "json": {} }
        ]

### List all StoreObjects [GET]

+ Response 200

    [StoreObjects Collection][]

### Create a StoreObject [POST]
You need only provide a JSON Object with a `json` property to create a StoreObject.

If you plan on creating hundreds or more StoreObjects, you'll probably want a way to search
them. You can pass an `indexedLong` and/or `indexedString` property to help.

+ Request (application/json)

        {
            "indexedLong": 4,
            "json": { "foo": 4 }
        }

+ Response 200

    [StoreObject][]
    
### Delete StoreObjects [DELETE]

This method lets you delete several StoreObjects with a single request.

You must pass the StoreObjects as an Array of IDs. Invalid IDs will be ignored.

+ Request (application/json)

        [ 123, 234, 345 ]
        
+ Response 204

# Group DocumentStoreObjects

A **DocumentStoreObject** is a link between a *Document* and a *StoreObject*.

For instance, if your StoreObjects are tags, then your DocumentStoreObjects will specify which documents have which tags.

This description is intentionally vague. StoreObjects won't handle everybody's needs, but they
should cover a broad set of applications, and they're reasonably efficient.

Overview uses DocumentStoreObjects to search for documents. See the `objects` parameter in [List all Documents](#documents-collection).

## DocumentStoreObject

You can only create and destroy DocumentStoreObjects in bulk. These parameters are purely informative.

+ Parameters
    + documentId (required, number, `1`) ... The Document being associated
    + objectId (required, number, `2`) ... The StoreObject being associated
    
+ Model (application/json)

        {
            "documentId": 1,
            "objectId": 2
        }

## DocumentStoreObjects Collection [/store/document-objects]
Collection of all DocumentStoreObjects.

To save bandwidth, this API uses an abridged syntax. Instead of JSON like `{ "documentId": 2, "objectId": 4 }`, each object looks like `[ 2, 4 ]`.

+ Model (application/json)

        [
            [ 1, 2 ],
            [ 3, 4 ]
        ]

### Create DocumentStoreObjects [POST]

If you send a DocumentStoreObject that already exists, it will be overwritten.

+ Request (application/json)

        [
            [ 1, 2 ],
            [ 3, 4 ]
        ]

+ Response 200

    [DocumentStoreObjects Collection][]

### Delete DocumentStoreObjects [DELETE]

If you try and delete a DocumentStoreObject that does not exist, it will continue to not exist.

+ Request (application/json)

        [
            [ 1, 2 ],
            [ 3, 4 ]
        ]

+ Response 204